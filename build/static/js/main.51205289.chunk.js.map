{"version":3,"sources":["socket.js","logo.svg","components/MyTextInput.jsx","components/MainHeading.jsx","components/Map.jsx","views/Form.jsx","views/Forms.jsx","components/MyModal.jsx","utils/getAuthHeader.js","store/user.reducer.js","views/Login.jsx","components/Header.jsx","views/FormInfo.jsx","App.js","store/index.js","index.js"],"names":["socket","MyTextInput","label","textarea","select","controlProps","props","useField","field","meta","InputEl","Textarea","Select","Input","isInvalid","error","touched","MainHeading","text","textAlign","padding","as","size","Map","mapRef","useRef","useEffect","Loader","apiKey","version","load","then","google","console","log","parkCoords","lat","lng","map","maps","document","getElementById","center","zoom","parkMarker","Marker","position","ds","DirectionsService","dr","DirectionsRenderer","setMap","current","pb","onClick","navigator","geolocation","getCurrentPosition","coords","request","origin","latitude","longitude","destination","travelMode","route","result","status","setDirections","colorScheme","id","style","height","Form","toast","isAuthenticated","useSelector","state","user","navigate","useNavigate","border","borderColor","borderTop","p","initialValues","fullName","reason","need","phone","message","email","validationSchema","Yup","required","onSubmit","values","a","setSubmitting","resetForm","axios","post","formCreated","data","emit","title","isClosable","formik","noValidate","templateColumns","sm","md","gap","width","colSpan","name","type","placeholder","isRequired","rowSpan","flex","display","flexDirection","isFullWidth","isLoading","isSubmitting","loadingText","variant","Forms","forms","form","cursor","_id","MyModal","isOpen","onClose","onOpen","children","mr","getAuthHeader","headers","Authorization","localStorage","getItem","sendValidation","createAsyncThunk","thunkAPI","get","sendLogin","credentials","isLoggedReducer","createAction","createReducer","isValidated","fulfilled","payload","setItem","token","rejected","action","removeItem","Login","dispatch","useDispatch","align","justify","bg","useColorModeValue","spacing","mx","maxW","py","px","fontSize","color","rounded","boxShadow","password","setFieldValue","_hover","Header","useDisclosure","margin","username","isFitted","isDisabled","FormInfo","useState","setForm","formId","useParams","Object","keys","key","justifyContent","App","useToast","setForms","io","on","first","pt","centerContent","index","element","path","store","configureStore","reducer","userReducer","ReactDOM","render","StrictMode"],"mappings":"yJAEWA,E,8DCFI,I,+NCsCAC,EAzBK,SAAC,GAMd,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,OAGI,IAFJC,oBAEI,MAFW,GAEX,EADDC,EACC,iBACJ,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACMC,EAAUP,EAAWQ,IAAWP,EAASQ,IAASC,IACxD,OACE,mCACE,eAAC,IAAD,yBAGEC,UAAWL,EAAKM,OAASN,EAAKO,SAC1BX,GAJN,cAME,cAAC,IAAD,UAAYH,IACZ,cAACQ,EAAD,2BAAaF,GAAWF,IACxB,cAAC,IAAD,UAAmBG,EAAKM,e,SCpBjBE,EAVK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACE,mCACE,cAAC,IAAD,CAASC,UAAU,SAASC,QAAS,CAAC,IAAK,MAAOC,GAAG,KAAKC,KAAK,KAA/D,SACGJ,O,0BC0EMK,EA1EH,WACV,IAAMC,EAASC,mBAEfC,qBAAU,WACO,IAAIC,IAAO,CACxBC,OAAQ,0CACRC,QAAS,WAGJC,OAAOC,MAAK,SAACC,GAClBC,QAAQC,IAAI,cAEZ,IAAMC,EAAa,CAAEC,KAAM,kBAAmBC,KAAM,mBAE9CC,EAAM,IAAIN,EAAOO,KAAKhB,IAAIiB,SAASC,eAAe,OAAQ,CAC9DC,OAAQP,EACRQ,KAAM,KAGFC,EAAa,IAAIZ,EAAOO,KAAKM,OAAO,CACxCC,SAAUX,EACVG,IAAKA,IAGDS,EAAK,IAAIf,EAAOO,KAAKS,kBACrBC,EAAK,IAAIjB,EAAOO,KAAKW,mBAC3BD,EAAGE,OAAOb,GACVd,EAAO4B,QAAU,CAAEL,KAAIE,KAAId,aAAYG,MAAKN,SAAQY,mBAErD,IA8BH,OACE,gCACE,cAAC,EAAD,CAAa1B,KAAK,SAElB,cAAC,IAAD,CAAKmC,GAAG,IAAIlC,UAAU,MAAtB,SACE,cAAC,IAAD,CAAQmC,QAjCA,WACZ,MAAwD9B,EAAO4B,QAAvDL,EAAR,EAAQA,GAAIE,EAAZ,EAAYA,GAAId,EAAhB,EAAgBA,WAAyBS,GAAzC,EAA4BN,IAA5B,EAAiCN,OAAjC,EAAyCY,YAE7BW,UAAUC,YAClBC,oBAAmB,YAAiB,IAAdC,EAAa,EAAbA,OASlBC,EAAU,CACdC,OATe,CACfxB,IAAKsB,EAAOG,SACZxB,IAAKqB,EAAOI,WAQZC,YAAa5B,EACb6B,WAAY,WAGdjB,EAAGkB,MAAMN,GAAS,SAACO,EAAQC,GACX,MAAVA,IACFvB,EAAWO,OAAO,MAClBF,EAAGmB,cAAcF,WAWKG,YAAY,OAApC,2BAKF,qBAAKC,GAAG,MAAMC,MAAO,CAAEC,OAAQ,eC6FtBC,EAzJF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACNC,EAAoBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAjDH,gBACFI,EAAWC,cAEjB,OACE,qCACE,cAAC,EAAD,CAAa9D,KAAK,eAElB,cAAC,IAAD,CAAK+D,OAAO,iBAAiBC,YAAY,OAAOC,UAAU,OAAOC,EAAE,IAAnE,SACE,cAAC,IAAD,CACEC,cAAe,CACbC,SAAU,GACVC,OAAQ,GACRzC,SAAU,GACV0C,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,MAAO,IAETC,iBAAkBC,IAAW,CAC3BP,SAAUO,MAAaC,SAAS,aAChCP,OAAQM,MAAaC,SAAS,aAC9BhD,SAAU+C,MAAaC,SAAS,aAChCN,KAAMK,MAAaC,SAAS,aAC5BL,MAAOI,MAAaC,SAAS,aAC7BJ,QAASG,MAAaC,SAAS,aAC/BH,MAAOE,MAAaF,MAAM,oBAAoBG,SAAS,eAEzDC,SAAQ,uCAAE,WAAOC,EAAP,wBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,UAAhC,SAC4BC,IAAMC,KACxC,aACAL,GAHM,gBACMM,EADN,EACAC,KAKRL,GAAc,GACdlG,EAAOwG,KAAK,WAAYF,GACxB5B,EAAM,CACJ+B,MAAO,qBACPtC,OAAQ,UACRuC,YAAY,IAGd/B,EAAkBI,EAAS,UAAYoB,IAd/B,2CAAF,wDAnBV,SAoCG,SAACQ,GAAD,OACC,eAAC,IAAD,CAAYC,YAAU,EAAtB,UACE,eAAC,IAAD,CACEC,gBAAiB,CAAEC,GAAI,iBAAkBC,GAAI,kBAC7CC,IAAK,EACLC,MAAM,OAHR,UAKE,cAAC,IAAD,CAAUC,QAAS,EAAnB,SACE,cAAC,EAAD,CACEhH,MAAM,oBACNiH,KAAK,WACLC,KAAK,OACLC,YAAY,oBACZhH,aAAc,CAAEiH,YAAY,OAGhC,cAAC,IAAD,CAAUJ,QAAS,EAAnB,SACE,cAAC,EAAD,CACEhH,MAAM,kBACNiH,KAAK,SACLC,KAAK,OACLC,YAAY,kBACZhH,aAAc,CAAEiH,YAAY,OAGhC,cAAC,IAAD,CAAUJ,QAAS,EAAnB,SACE,cAAC,EAAD,CACEhH,MAAM,QACNiH,KAAK,WACLC,KAAK,OACLC,YAAY,QACZhH,aAAc,CAAEiH,YAAY,OAGhC,cAAC,IAAD,CAAUJ,QAAS,EAAnB,SACE,eAAC,EAAD,CACE9G,QAAM,EACNF,MAAM,YACNiH,KAAK,OACLE,YAAY,YACZhH,aAAc,CAAEiH,YAAY,GAL9B,UAOE,iEACA,gEACA,kEACA,iEACA,uDAGJ,cAAC,IAAD,CAAUJ,QAAS,EAAnB,SACE,cAAC,EAAD,CACEhH,MAAM,UACNiH,KAAK,QACLC,KAAK,OACLC,YAAY,UACZhH,aAAc,CAAEiH,YAAY,OAGhC,cAAC,IAAD,CAAUC,QAAS,EAAGL,QAAS,EAA/B,SACE,cAAC,EAAD,CACE/G,UAAQ,EACRD,MAAM,UACNiH,KAAK,UACLC,KAAK,OACLC,YAAY,UACZG,KAAK,IACLnH,aAAc,CACZiH,YAAY,EACZG,QAAS,OACTC,cAAe,SACflD,OAAQ,YAId,cAAC,IAAD,CAAU0C,QAAS,EAAnB,SACE,cAAC,EAAD,CACEhH,MAAM,QACNiH,KAAK,QACLC,KAAK,OACLC,YAAY,QACZhH,aAAc,CAAEiH,YAAY,UAIlC,uBAEA,cAAC,IAAD,CACEF,KAAK,SACLO,aAAW,EACXC,UAAWjB,EAAOkB,aAClBC,YAAY,aACZzD,YAAY,OACZ0D,QAAQ,UANV,4BAeR,qBAAKxD,MAAO,CAAE0C,MAAO,QAArB,SACE,cAAC,EAAD,U,SCnGOe,EAhDD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTlD,EAAWC,cAcjB,OACE,gCAEE,cAAC,EAAD,CAAa9D,KAAK,gBAElB,eAAC,IAAD,CAAOmD,YAAY,OAAO0D,QAAQ,UAAlC,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,gCACA,cAAC,IAAD,2BACA,cAAC,IAAD,wBACA,cAAC,IAAD,uBAGJ,cAAC,IAAD,UACGE,EAAM3F,KAAI,SAAC4F,GAAD,OACT,eAAC,IAAD,CAEEC,OAAO,UACP7E,QAAS,kBAAMyB,EAASmD,EAAKE,MAH/B,UAKE,cAAC,IAAD,UAAKF,EAAK5C,WACV,cAAC,IAAD,UAAK4C,EAAK3C,SACV,cAAC,IAAD,UAAK2C,EAAK1C,OACV,cAAC,IAAD,oBAPK0C,EAAKE,iB,6CCHTC,EAhCC,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,OAAgBC,GAAyC,EAAjDC,OAAiD,EAAzCD,SAAS9B,EAAgC,EAAhCA,MAAOV,EAAyB,EAAzBA,SAAU0C,EAAe,EAAfA,SAE3D,OACE,mCAGE,eAAC,IAAD,CAAOnH,KAAK,KAAKgH,OAAQA,EAAQC,QAASA,EAA1C,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,UAAc9B,IACd,cAAC,IAAD,IACA,cAAC,IAAD,UAEGgC,IAGH,eAAC,IAAD,WACE,cAAC,IAAD,CAAQpE,YAAY,OAAOqE,GAAI,EAAGpF,QAASiF,EAA3C,mBAGCxC,GACC,cAAC,IAAD,CAAQA,SAAUA,EAAUgC,QAAQ,QAApC,0C,6DC1BCY,GAPO,sCAAIrI,EAAJ,yBAAIA,EAAJ,sBAAe,CACnCsI,QAAQ,aACNC,cAAe,UAAYC,aAAaC,QAAQ,UAC7CzI,KCOM0I,GAAiBC,aAC5B,mBACA,SAAC1C,EAAM2C,GACL,OAAO9C,IACJ+C,IAAI,qBAAsBR,MAC1B5G,MAAK,qBAAGwE,WAIF6C,GAAYH,aAAiB,cAAc,SAACI,GACvD,OAAOjD,IAAMC,KAAK,kBAAmBgD,GAAatH,MAAK,qBAAGwE,WAuC7C+C,IApCWC,aAAa,eAEfC,aACtB,CACEC,aAAgBX,aAAaC,QAAQ,SACrCpE,iBAAiB,IAHgB,mBAahCyE,GAAUM,WAAY,SAAC7E,EAAD,GAAyB,IAAf8E,EAAc,EAAdA,QAG/B,OAFAb,aAAac,QAAQ,QAASD,EAAQE,OACtC7J,EAAOwG,KAAK,aACL,2BAAK3B,GAAZ,IAAmBF,iBAAiB,GAASgF,EAAQ7E,SAhBtB,cAmBhCsE,GAAUU,UAAW,SAACjF,EAAOkF,GAC5BlF,EAAMF,iBAAkB,KApBO,cAuBhCqE,GAAeU,WAAY,SAAC7E,EAAD,GAAyB,IAAf8E,EAAc,EAAdA,QACpC,OAAO,aAAEF,aAAa,EAAM9E,iBAAiB,GAASgF,EAAQ7E,SAxB/B,cA2BhCkE,GAAec,UAAW,SAACjF,EAAOkF,GAEjC,OADAjB,aAAakB,WAAW,SACjB,CAAEP,aAAa,EAAM9E,iBAAiB,MA7Bd,KCHtB,SAASsF,GAAT,GAA6B,IAAZ1B,EAAW,EAAXA,QACxB2B,EAAWC,cACjB,OACE,cAAC,IAAD,CAEEC,MAAO,SACPC,QAAS,SACTC,GAAIC,YAAkB,UAAW,YAJnC,SAME,eAAC,IAAD,CAAOC,QAAS,EAAGC,GAAI,OAAQC,KAAM,KAAMC,GAAI,GAAIC,GAAI,EAAvD,UACE,eAAC,IAAD,CAAOR,MAAO,SAAd,UACE,cAAC,IAAD,CAASS,SAAU,MAAnB,qCACA,eAAC,IAAD,CAAMA,SAAU,KAAMC,MAAO,WAA7B,sCAC2B,cAAC,IAAD,CAAMA,MAAO,WAAb,sBAD3B,sBAIF,cAAC,IAAD,CACEC,QAAS,KACTT,GAAIC,YAAkB,QAAS,YAC/BS,UAAW,KACX5F,EAAG,EAJL,SAME,cAAC,IAAD,CACEC,cAAe,CAAEM,MAAO,GAAIsF,SAAU,IACtCrF,iBAAkBC,IAAW,CAC3BF,MAAOE,MACJF,MAAM,yBACNG,SAAS,YACZmF,SAAUpF,MAAaC,SAAS,yBAElCC,SAAU,SAACC,EAAQkC,GAEjBgC,EAASd,GAAUpD,IAASjE,MAAK,SAACgI,GAC5BA,EAAOhJ,OACTmH,EAAKhC,eAAc,GACnBgC,EAAKgD,cAAc,WAAY,IAAI,IAGnC3C,QAhBR,SAqBG,SAAC5B,GAAD,OACC,cAAC,IAAD,CAAMC,YAAU,EAAhB,SACE,eAAC,IAAD,CAAO4D,QAAS,EAAhB,UACE,cAAC,EAAD,CAAatK,MAAM,QAAQiH,KAAK,QAAQC,KAAK,SAC7C,cAAC,EAAD,CACElH,MAAM,WACNiH,KAAK,WACLC,KAAK,aAEP,cAAC,IAAD,CAAOoD,QAAS,GAAhB,SASE,cAAC,IAAD,CACE5C,UAAWjB,EAAOkB,aAClBT,KAAK,SACLkD,GAAI,WACJQ,MAAO,QACPK,OAAQ,CACNb,GAAI,YANR,sC,2BC9BLc,GA1CA,WACb,IAAMrG,EAAWC,cACjB,EAAqCJ,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAA1DH,EAAR,EAAQA,gBAAoBG,EAA5B,kBACA,EAAoCuG,cAA5B/C,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,OAAQD,EAAxB,EAAwBA,QAExB,OACE,qCACE,cAAC,EAAD,CAASD,OAAQA,EAAQE,OAAQA,EAAQD,QAASA,EAAlD,SACE,cAAC0B,GAAD,CAAO1B,QAASA,MAGlB,eAAC,IAAD,CAAKtB,MAAO,CAAC,KAAM,MAAOqE,OAAO,SAAjC,UACE,cAAC,IAAD,CAAKjI,GAAG,IAAIlC,UAAU,MAAtB,SACGwD,EACC,cAAC,IAAD,CAAStD,GAAG,KAAKC,KAAK,KAAtB,SACGwD,EAAKyG,WAGR,cAAC,IAAD,CAAQlH,YAAY,OAAOf,QAASkF,EAApC,qBAMJ,cAAC,IAAD,CAAMnE,YAAY,OAAOmH,UAAQ,EAAjC,SAEE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKlI,QAAS,kBAAMyB,EAAS,UAA7B,wBACA,cAAC,IAAD,CACE0G,YAAa9G,EACbrB,QAAS,kBAAMyB,EAAS,WAF1B,qC,oBCwBG2G,GA5CE,WACf,MAAwBC,mBAAS,IAAjC,mBAAOzD,EAAP,KAAa0D,EAAb,KACM7G,EAAWC,cACT6G,EAAWC,cAAXD,OAYR,OAVAnK,qBAAU,WACR,sBAAC,8BAAAuE,EAAA,sEAC8BG,IAAM+C,IAAN,qBACb0C,GACdlD,MAHH,gBACeT,EADf,EACS3B,KAIRqF,EAAQ1D,GALT,0CAAD,KAOC,IAGD,qCACE,cAAC,EAAD,CAAahH,KAAK,SAElB,cAAC,KAAD,CAAMsJ,QAAS,EAAf,SACGuB,OAAOC,KAAK9D,GAAM5F,KAAI,SAAC2J,GAAD,OACrB,eAAC,KAAD,WACE,cAAC,KAAD,CAAKvD,GAAG,IAAIX,QAAQ,QAAQ1D,YAAY,OAAxC,SACG4H,IAEF/D,EAAK+D,KAJOA,QAQnB,uBAEA,cAAC,IAAD,CAAKxE,QAAQ,OAAOR,MAAM,OAAOiF,eAAe,MAAhD,SACE,cAAC,IAAD,CACE5I,QAAS,kBAAMyB,EAAS,WACxBV,YAAY,OACZ0D,QAAQ,UAHV,0B,qCC0BOoE,OAxDf,WACE,IAAMzH,EAAQ0H,cACd,EAA0BT,mBAAS,IAAnC,mBAAO1D,EAAP,KAAcoE,EAAd,KACMnC,EAAWC,cACjB,EAAkDvF,aAChD,SAACC,GAAD,OAAWA,EAAMC,QADXH,EAAR,EAAQA,gBAAiB8E,EAAzB,EAAyBA,YA4BzB,OA5BA,kBAIA/H,qBAAU,YbxBV1B,EAASsM,YAAG,Ka0BH9F,KAAK,eACX,IAEH9E,qBAAU,WACJiD,GAEF3E,EAAOuM,GAAG,aAAa,SAACtE,EAAOuE,GAC7BH,EAASpE,IACRuE,GACC9H,EAAM,CACJ+B,MAAO,8BACPtC,OAAQ,OACRuC,YAAY,SAInB,CAAC/B,IAEJjD,qBAAU,WACH+H,GAAaS,EAASlB,QAC1B,IAEES,EAGH,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKgD,GAAI,CAAC,IAAK,MAAf,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAW/B,KAAK,eAAegC,eAAa,EAA5C,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOC,KAAK,QAAQD,QAAS,cAAC,EAAD,CAAMlI,MAAOA,MAC1C,cAAC,IAAD,CAAOmI,KAAK,SAASD,QAAS,cAAC,EAAD,CAAO3E,MAAOA,MAC5C,cAAC,IAAD,CAAO4E,KAAK,iBAAiBD,QAAS,cAAC,GAAD,cAI5C,uBACA,0BAnBqB,2CC1CZE,GAPDC,aAAe,CAE3BC,QAAS,CACPlI,KAAMmI,M,UCEVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,KAAD,UACE,cAAC,GAAD,UAINtK,SAASC,eAAe,W","file":"static/js/main.51205289.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nexport let socket;\n\nexport const connect = (userID, fullName) => {\n  socket = io(\"\");\n};\n\n// class Socket {\n//   socket;\n \n//   connect() {\n//     this.socket = io.connect(\"\");\n//   }\n\n//   getOrders() {\n//     socket.emit(\"get-orders\");\n//   }\n\n//   onNewOrders (){\n\n//   }\n\n// }\n\n// export default new Socket();\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\n\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Input,\n  Textarea,\n  Select,\n} from \"@chakra-ui/react\";\nimport { Formik, Form as FormikForm, useField } from \"formik\";\n\nconst MyTextInput = ({\n  label,\n  textarea,\n  select,\n  controlProps = {},\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const InputEl = textarea ? Textarea : select ? Select : Input;\n  return (\n    <>\n      <FormControl\n        // display=\"flex\"\n        // flexDirection=\"column\"\n        isInvalid={meta.error && meta.touched}\n        {...controlProps}\n      >\n        <FormLabel>{label}</FormLabel>\n        <InputEl {...field} {...props} />\n        <FormErrorMessage>{meta.error}</FormErrorMessage>\n      </FormControl>\n    </>\n  );\n};\n\nexport default MyTextInput;\n","import React from \"react\";\nimport { Heading } from \"@chakra-ui/react\";\nconst MainHeading = ({ text }) => {\n  return (\n    <>\n      <Heading textAlign=\"center\" padding={[\"5\", \"10\"]} as=\"h3\" size=\"lg\">\n        {text}\n      </Heading>\n    </>\n  );\n};\n\nexport default MainHeading;\n","import React, { useEffect, useRef } from \"react\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n\nimport { Button, Box } from \"@chakra-ui/react\";\nimport MainHeading from \"./MainHeading\";\n\nconst Map = () => {\n  const mapRef = useRef();\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: \"AIzaSyBfBVNl7EUFkj6i1JXdX6dtb5UAbuqIqqM\",\n      version: \"weekly\",\n    });\n\n    loader.load().then((google) => {\n      console.log(\"API LOADED\");\n\n      const parkCoords = { lat: -12.23611796591263, lng: -76.91001322915511 };\n\n      const map = new google.maps.Map(document.getElementById(\"map\"), {\n        center: parkCoords,\n        zoom: 17,\n      });\n\n      const parkMarker = new google.maps.Marker({\n        position: parkCoords,\n        map: map,\n      });\n\n      const ds = new google.maps.DirectionsService();\n      const dr = new google.maps.DirectionsRenderer();\n      dr.setMap(map);\n      mapRef.current = { ds, dr, parkCoords, map, google, parkMarker };\n    });\n  }, []);\n\n  const route = () => {\n    const { ds, dr, parkCoords, map, google, parkMarker } = mapRef.current;\n\n    const geo = navigator.geolocation;\n    geo.getCurrentPosition(({ coords }) => {\n      const myCoords = {\n        lat: coords.latitude,\n        lng: coords.longitude,\n      };\n      // new google.maps.Marker({\n      //   position: myCoords,\n      //   map: map,\n      // });\n      const request = {\n        origin: myCoords,\n        destination: parkCoords,\n        travelMode: \"DRIVING\",\n      };\n\n      ds.route(request, (result, status) => {\n        if (status == \"OK\") {\n          parkMarker.setMap(null);\n          dr.setDirections(result);\n        }\n      });\n    });\n  };\n\n  return (\n    <div>\n      <MainHeading text=\"Mapa\" />\n\n      <Box pb=\"2\" textAlign=\"end\">\n        <Button onClick={route} colorScheme=\"teal\">\n          Trazar ruta\n        </Button>\n      </Box>\n\n      <div id=\"map\" style={{ height: \"500px\" }}></div>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\n\nimport { Grid, GridItem, Button, Box } from \"@chakra-ui/react\";\nimport { PhoneIcon, AddIcon, WarningIcon, CheckIcon } from \"@chakra-ui/icons\";\nimport { Formik, Form as FormikForm, useField } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport axios from \"axios\";\nimport MyTextInput from \"../components/MyTextInput\";\nimport { useNavigate } from \"react-router\";\nimport MainHeading from \"../components/MainHeading\";\nimport { socket } from \"../socket\";\nimport { useSelector } from \"react-redux\";\nimport Map from \"../components/Map\";\n\nconst Form = ({ toast }) => {\n  const { isAuthenticated } = useSelector((state) => state.user);\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <MainHeading text=\"Formulario\" />\n\n      <Box border=\"3px solid gray\" borderColor=\"teal\" borderTop=\"none\" p=\"7\">\n        <Formik\n          initialValues={{\n            fullName: \"\",\n            reason: \"\",\n            position: \"\",\n            need: \"\",\n            phone: \"\",\n            message: \"\",\n            email: \"\",\n          }}\n          validationSchema={Yup.object({\n            fullName: Yup.string().required(\"Requerido\"),\n            reason: Yup.string().required(\"Requerido\"),\n            position: Yup.string().required(\"Requerido\"),\n            need: Yup.string().required(\"Requerido\"),\n            phone: Yup.number().required(\"Requerido\"),\n            message: Yup.string().required(\"Requerido\"),\n            email: Yup.string().email(\"correo no valido\").required(\"Requerido\"),\n          })}\n          onSubmit={async (values, { setSubmitting, resetForm }) => {\n            const { data: formCreated } = await axios.post(\n              \"/api/forms\",\n              values\n            );\n\n            setSubmitting(false);\n            socket.emit(\"new-form\", formCreated);\n            toast({\n              title: \"Formulario enviado\",\n              status: \"success\",\n              isClosable: true,\n            });\n\n            isAuthenticated ? navigate(\"/forms\") : resetForm();\n          }}\n        >\n          {(formik) => (\n            <FormikForm noValidate>\n              <Grid\n                templateColumns={{ sm: \"repeat(1, 1fr)\", md: \"repeat(2, 1fr)\" }}\n                gap={4}\n                width=\"100%\"\n              >\n                <GridItem colSpan={1}>\n                  <MyTextInput\n                    label=\"Nombre y Apellido\"\n                    name=\"fullName\"\n                    type=\"text\"\n                    placeholder=\"Nombre y Apellido\"\n                    controlProps={{ isRequired: true }}\n                  />\n                </GridItem>\n                <GridItem colSpan={1}>\n                  <MyTextInput\n                    label=\"Razón Social\"\n                    name=\"reason\"\n                    type=\"text\"\n                    placeholder=\"Razón Social\"\n                    controlProps={{ isRequired: true }}\n                  />\n                </GridItem>\n                <GridItem colSpan={1}>\n                  <MyTextInput\n                    label=\"Cargo\"\n                    name=\"position\"\n                    type=\"text\"\n                    placeholder=\"Cargo\"\n                    controlProps={{ isRequired: true }}\n                  />\n                </GridItem>\n                <GridItem colSpan={1}>\n                  <MyTextInput\n                    select\n                    label=\"Necesidad\"\n                    name=\"need\"\n                    placeholder=\"Necesidad\"\n                    controlProps={{ isRequired: true }}\n                  >\n                    <option>Atracción y Selección</option>\n                    <option>Evaluación Psicolaboral</option>\n                    <option>Capacitación & E-Learning</option>\n                    <option>Consultoría & Desarrollo</option>\n                    <option>Outplacement</option>\n                  </MyTextInput>\n                </GridItem>\n                <GridItem colSpan={1}>\n                  <MyTextInput\n                    label=\"Celular\"\n                    name=\"phone\"\n                    type=\"text\"\n                    placeholder=\"Celular\"\n                    controlProps={{ isRequired: true }}\n                  />\n                </GridItem>\n                <GridItem rowSpan={2} colSpan={1}>\n                  <MyTextInput\n                    textarea\n                    label=\"Mensaje\"\n                    name=\"message\"\n                    type=\"text\"\n                    placeholder=\"Mensaje\"\n                    flex=\"1\"\n                    controlProps={{\n                      isRequired: true,\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      height: \"100%\",\n                    }}\n                  />\n                </GridItem>\n                <GridItem colSpan={1}>\n                  <MyTextInput\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"Email\"\n                    controlProps={{ isRequired: true }}\n                  />\n                </GridItem>\n              </Grid>\n              <br />\n\n              <Button\n                type=\"submit\"\n                isFullWidth\n                isLoading={formik.isSubmitting}\n                loadingText=\"Submitting\"\n                colorScheme=\"teal\"\n                variant=\"outline\"\n              >\n                Submit\n              </Button>\n            </FormikForm>\n          )}\n        </Formik>\n      </Box>\n\n      <div style={{ width: \"100%\" }}>\n        <Map />\n      </div>\n    </>\n  );\n};\n\nexport default Form;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport MainHeading from \"../components/MainHeading\";\n\nconst Forms = ({ forms }) => {\n  const navigate = useNavigate();\n\n  // const { isAuthenticated } = useSelector((state) => state.user);\n\n  // const [forms, setForms] = useState([]);\n\n  // useEffect(() => {\n  //   (async () => {\n  //     const { data: forms } = await axios.get(\"/api/forms\");\n  //     setForms(forms);\n  //   })();\n\n  // }, []);\n\n  return (\n    <div>\n      {/* <h2>Forms</h2> */}\n      <MainHeading text=\"Formularios\" />\n\n      <Table colorScheme=\"teal\" variant=\"striped\">\n        <Thead>\n          <Tr>\n            <Th>Nombre y Apellido</Th>\n            <Th>Razon Social</Th>\n            <Th>Necesidad</Th>\n            <Th>...</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {forms.map((form) => (\n            <Tr\n              key={form._id}\n              cursor=\"pointer\"\n              onClick={() => navigate(form._id)}\n            >\n              <Td>{form.fullName}</Td>\n              <Td>{form.reason}</Td>\n              <Td>{form.need}</Td>\n              <Td>...</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Forms;\n","import React from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from \"@chakra-ui/react\";\n\nconst MyModal = ({ isOpen, onOpen, onClose, title, onSubmit, children }) => {\n  //   const { isOpen, open, close } = useDisclosure();\n  return (\n    <>\n      {/* <Button onClick={open}>Open Modal</Button> */}\n\n      <Modal size=\"lg\" isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>{title}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            {/* <Lorem count={2} /> */}\n            {children}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            {onSubmit && (\n              <Button onSubmit={onSubmit} variant=\"ghost\">\n                Secondary Action\n              </Button>\n            )}\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default MyModal;\n","const getAuthHeader = (...props) => ({\n  headers: {\n    Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n    ...props,\n  },\n});\n\nexport default getAuthHeader;\n","import {\n  createAction,\n  createAsyncThunk,\n  createReducer,\n} from \"@reduxjs/toolkit\";\n\nimport axios from \"axios\";\nimport { socket } from \"../socket\";\nimport { getAuthHeader } from \"../utils\";\n\nexport const sendValidation = createAsyncThunk(\n  \"SEND_VALIDATION\",\n  (data, thunkAPI) => {\n    return axios\n      .get(\"/api/auth/validate\", getAuthHeader())\n      .then(({ data }) => data);\n  }\n);\n\nexport const sendLogin = createAsyncThunk(\"SEND_LOGIN\", (credentials) => {\n  return axios.post(\"/api/auth/login\", credentials).then(({ data }) => data);\n});\n\nexport const sendLogout = createAction(\"SEND_LOGOUT\");\n\nconst isLoggedReducer = createReducer(\n  {\n    isValidated: !!!localStorage.getItem(\"token\"),\n    isAuthenticated: false,\n  },\n  {\n    // [sendLogout]: (state, { payload: user }) => {\n    //   localStorage.removeItem(\"token\");\n    //   state.data = {};\n    //   state.isValidated = true;\n    //   state.isAuthenticated = false;\n    // },\n\n    [sendLogin.fulfilled]: (state, { payload }) => {\n      localStorage.setItem(\"token\", payload.token);\n      socket.emit(\"get-forms\");\n      return { ...state, isAuthenticated: true, ...payload.user };\n    },\n\n    [sendLogin.rejected]: (state, action) => {\n      state.isAuthenticated = false;\n    },\n\n    [sendValidation.fulfilled]: (state, { payload }) => {\n      return { isValidated: true, isAuthenticated: true, ...payload.user };\n    },\n\n    [sendValidation.rejected]: (state, action) => {\n      localStorage.removeItem(\"token\");\n      return { isValidated: true, isAuthenticated: false };\n    },\n  }\n);\n\nexport default isLoggedReducer;\n","import {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Checkbox,\n  Stack,\n  Link,\n  Button,\n  Heading,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport MyTextInput from \"../components/MyTextInput\";\nimport { useDispatch } from \"react-redux\";\nimport { sendLogin } from \"../store/user.reducer\";\n\nexport default function Login({ onClose }) {\n  const dispatch = useDispatch();\n  return (\n    <Flex\n      // minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    >\n      <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\n        <Stack align={\"center\"}>\n          <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\n          <Text fontSize={\"lg\"} color={\"gray.600\"}>\n            to enjoy all of our cool <Link color={\"blue.400\"}>features</Link> ✌️\n          </Text>\n        </Stack>\n        <Box\n          rounded={\"lg\"}\n          bg={useColorModeValue(\"white\", \"gray.700\")}\n          boxShadow={\"lg\"}\n          p={8}\n        >\n          <Formik\n            initialValues={{ email: \"\", password: \"\" }}\n            validationSchema={Yup.object({\n              email: Yup.string()\n                .email(\"Invalid email address\")\n                .required(\"Required\"),\n              password: Yup.string().required(\"Enter your password\"),\n            })}\n            onSubmit={(values, form) => {\n              // { setSubmitting, setFieldError, setFieldValue }\n              dispatch(sendLogin(values)).then((action) => {\n                if (action.error) {\n                  form.setSubmitting(false);\n                  form.setFieldValue(\"password\", \"\", false);\n                  // setFieldError(\"password\", \"email o password incorrectos\");\n                } else {\n                  onClose();\n                }\n              });\n            }}\n          >\n            {(formik) => (\n              <Form noValidate>\n                <Stack spacing={4}>\n                  <MyTextInput label=\"Email\" name=\"email\" type=\"text\" />\n                  <MyTextInput\n                    label=\"Password\"\n                    name=\"password\"\n                    type=\"password\"\n                  />\n                  <Stack spacing={10}>\n                    {/* <Stack\n                      direction={{ base: \"column\", sm: \"row\" }}\n                      align={\"start\"}\n                      justify={\"space-between\"}\n                    >\n                      <Checkbox>Remember me</Checkbox>\n                      <Link color={\"blue.400\"}>Forgot password?</Link>\n                    </Stack> */}\n                    <Button\n                      isLoading={formik.isSubmitting}\n                      type=\"submit\"\n                      bg={\"blue.400\"}\n                      color={\"white\"}\n                      _hover={{\n                        bg: \"blue.500\",\n                      }}\n                    >\n                      Sign in\n                    </Button>\n                  </Stack>\n                </Stack>\n              </Form>\n            )}\n          </Formik>\n          {/* <FormControl id=\"email\">\n              <FormLabel>Email address</FormLabel>\n              <Input type=\"email\" />\n            </FormControl>\n            <FormControl id=\"password\">\n              <FormLabel>Password</FormLabel>\n              <Input type=\"password\" />\n            </FormControl>\n            <Stack spacing={10}>\n              <Stack\n                direction={{ base: \"column\", sm: \"row\" }}\n                align={\"start\"}\n                justify={\"space-between\"}\n              >\n                <Checkbox>Remember me</Checkbox>\n                <Link color={\"blue.400\"}>Forgot password?</Link>\n              </Stack>\n              <Button\n                bg={\"blue.400\"}\n                color={\"white\"}\n                _hover={{\n                  bg: \"blue.500\",\n                }}\n              >\n                Sign in\n              </Button>\n            </Stack> */}\n        </Box>\n      </Stack>\n    </Flex>\n  );\n}\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Box, Tabs, TabList, Tab, Button, Heading } from \"@chakra-ui/react\";\n\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport MyModal from \"./MyModal\";\nimport Login from \"../views/Login\";\n\nconst Header = () => {\n  const navigate = useNavigate();\n  const { isAuthenticated, ...user } = useSelector((state) => state.user);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <MyModal isOpen={isOpen} onOpen={onOpen} onClose={onClose}>\n        <Login onClose={onClose} />\n      </MyModal>\n\n      <Box width={[\"sm\", \"xl\"]} margin=\"0 auto\">\n        <Box pb=\"5\" textAlign=\"end\">\n          {isAuthenticated ? (\n            <Heading as=\"h4\" size=\"md\">\n              {user.username}\n            </Heading>\n          ) : (\n            <Button colorScheme=\"teal\" onClick={onOpen}>\n              Login\n            </Button>\n          )}\n        </Box>\n\n        <Tabs colorScheme=\"teal\" isFitted>\n          {/* variant=\"enclosed\" */}\n          <TabList>\n            <Tab onClick={() => navigate(\"/form\")}>Formulario</Tab>\n            <Tab\n              isDisabled={!isAuthenticated}\n              onClick={() => navigate(\"/forms\")}\n            >\n              Formularios\n            </Tab>\n          </TabList>\n          {/* <TabPanels></TabPanels> */}\n        </Tabs>\n      </Box>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  List,\n  ListItem,\n  ListIcon,\n  OrderedList,\n  UnorderedList,\n  Button,\n  Box,\n  Tag,\n} from \"@chakra-ui/react\";\n\nimport { CheckCircleIcon } from \"@chakra-ui/icons\";\n// import { MdSettings } from \"react-icons/md\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport MainHeading from \"../components/MainHeading\";\nimport { getAuthHeader } from \"../utils\";\n\nconst FormInfo = () => {\n  const [form, setForm] = useState({});\n  const navigate = useNavigate();\n  const { formId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      const { data: form } = await axios.get(\n        `/api/forms/${formId}`,\n        getAuthHeader()\n      );\n      setForm(form);\n    })();\n  }, []);\n\n  return (\n    <>\n      <MainHeading text=\"Info\" />\n\n      <List spacing={3}>\n        {Object.keys(form).map((key) => (\n          <ListItem key={key}>\n            <Tag mr=\"4\" variant=\"solid\" colorScheme=\"teal\">\n              {key}\n            </Tag>\n            {form[key]}\n          </ListItem>\n        ))}\n      </List>\n      <br />\n\n      <Box display=\"flex\" width=\"100%\" justifyContent=\"end\">\n        <Button\n          onClick={() => navigate(\"/forms\")}\n          colorScheme=\"teal\"\n          variant=\"outline\"\n        >\n          Volver\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default FormInfo;\n\n/*\n<ListItem>\n          <ListIcon as={MdCheckCircle} color=\"green.500\" /> \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit\n        </ListItem>\n        <ListItem>\n           <ListIcon as={MdCheckCircle} color=\"green.500\" /> \n          Assumenda, quia temporibus eveniet a libero incidunt suscipit\n        </ListItem>\n        <ListItem>\n           <ListIcon as={MdCheckCircle} color=\"green.500\" /> \n          Quidem, ipsam illum quis sed voluptatum quae eum fugit earum\n        </ListItem>\n         You can also use custom icons from react-icons \n         <ListItem>\n          <ListIcon as={MdSettings} color=\"green.500\" />\n          Quidem, ipsam illum quis sed voluptatum quae eum fugit earum\n        </ListItem> \n\n*/\n","import logo from \"./logo.svg\";\nimport { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\n\nimport Form from \"./views/Form\";\nimport Forms from \"./views/Forms\";\nimport { Box, ChakraProvider, Container, useToast } from \"@chakra-ui/react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Header from \"./components/Header\";\nimport FormInfo from \"./views/FormInfo\";\nimport { connect, socket } from \"./socket\";\nimport { sendValidation } from \"./store/user.reducer\";\n\nfunction App() {\n  const toast = useToast();\n  const [forms, setForms] = useState([]);\n  const dispatch = useDispatch();\n  const { isAuthenticated, isValidated, ...user } = useSelector(\n    (state) => state.user\n  );\n\n  useEffect(() => {\n    connect();\n    socket.emit(\"get-forms\");\n  }, []);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // validar que no se agreguen mas listeners\n      socket.on(\"new-forms\", (forms, first) => {\n        setForms(forms);\n        !first &&\n          toast({\n            title: \"nuevo formulario registrado\",\n            status: \"info\",\n            isClosable: true,\n          });\n      });\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    if (!isValidated) dispatch(sendValidation());\n  }, []);\n\n  if (!isValidated) return <p>VALIDANDO</p>;\n\n  return (\n    <>\n      <Router>\n        <Box pt={[\"5\", \"10\"]}>\n          <Header />\n        </Box>\n\n        <Container maxW=\"container.lg\" centerContent>\n          <Routes>\n            <Route index element={<Form />} />\n            <Route path=\"/form\" element={<Form toast={toast} />} />\n            <Route path=\"/forms\" element={<Forms forms={forms} />} />\n            <Route path=\"/forms/:formId\" element={<FormInfo />} />\n          </Routes>\n        </Container>\n      </Router>\n      <br />\n      <br />\n    </>\n  );\n}\n\nexport default App;\n\n{\n  /* <div className=\"App\">\n<header className=\"App-header\">\n  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  <p>\n    Edit <code>src/App.js</code> and save to reload.\n  </p>\n  <a\n    className=\"App-link\"\n    href=\"https://reactjs.org\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    Learn React\n  </a>\n</header>\n</div> */\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\n// import logger from \"redux-logger\";\nimport userReducer from \"./user.reducer\";\n\nconst store = configureStore({\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  reducer: {\n    user: userReducer,\n  },\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}